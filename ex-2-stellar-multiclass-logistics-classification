{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3047436,"sourceType":"datasetVersion","datasetId":1866141}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<h1 style= \"text-align:center;\">Stellar Classification Dataset</h1>\n<h2 style= \"text-align:center;\">With Logistic Regression (Classification)</h2>","metadata":{}},{"cell_type":"markdown","source":"<p style = \"font-size: 20px; text-align: center; font-family: 'Roboto Mono', monospace;\">======================================================================</p>\n<p style = \"font-size: 20px; text-align: center; font-family: 'Roboto Mono', monospace;\">Developed for Semester 1: Machine Learning, Assessment 1 Exercise 2</p>","metadata":{}},{"cell_type":"code","source":"# Import important libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.utils import resample\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsRegressor\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, f1_score, roc_auc_score, classification_report\n\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:33.364036Z","iopub.execute_input":"2025-10-28T09:10:33.364365Z","iopub.status.idle":"2025-10-28T09:10:39.252977Z","shell.execute_reply.started":"2025-10-28T09:10:33.364335Z","shell.execute_reply":"2025-10-28T09:10:39.251846Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Loading Dataset and Reviewing Contents**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\ndata = pd.read_csv(\"/kaggle/input/stellar-classification-dataset-sdss17/star_classification.csv\")\nprint(data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:39.254169Z","iopub.execute_input":"2025-10-28T09:10:39.254702Z","iopub.status.idle":"2025-10-28T09:10:39.810761Z","shell.execute_reply.started":"2025-10-28T09:10:39.254668Z","shell.execute_reply":"2025-10-28T09:10:39.809128Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.info() # Info on dataset","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:39.813304Z","iopub.execute_input":"2025-10-28T09:10:39.813655Z","iopub.status.idle":"2025-10-28T09:10:39.858060Z","shell.execute_reply.started":"2025-10-28T09:10:39.813630Z","shell.execute_reply":"2025-10-28T09:10:39.856492Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:39.859980Z","iopub.execute_input":"2025-10-28T09:10:39.860388Z","iopub.status.idle":"2025-10-28T09:10:40.027762Z","shell.execute_reply.started":"2025-10-28T09:10:39.860353Z","shell.execute_reply":"2025-10-28T09:10:40.026052Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.head(15)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:40.028982Z","iopub.execute_input":"2025-10-28T09:10:40.029357Z","iopub.status.idle":"2025-10-28T09:10:40.055864Z","shell.execute_reply.started":"2025-10-28T09:10:40.029330Z","shell.execute_reply":"2025-10-28T09:10:40.054899Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.tail(15)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:40.056755Z","iopub.execute_input":"2025-10-28T09:10:40.057042Z","iopub.status.idle":"2025-10-28T09:10:40.104773Z","shell.execute_reply.started":"2025-10-28T09:10:40.056987Z","shell.execute_reply":"2025-10-28T09:10:40.103371Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Preprocessing Data**\nWe'll be checking for null values, and then drop them. For unneccessary features, that do not affect the classification systems (such as unique ID types), they'll also be dropped. Furthermore, as the dataset includes classifications that have uneven observations, I'll be using two balancing techniques including downsampling and upsampling to equal an odd number of 'class' types. After this, the 'class' types are going to be encoded using label encoder after being converted into a 1D array.","metadata":{}},{"cell_type":"code","source":"# Check for null values\nprint(\"\\nMissing values in dataset:\", data.isnull().sum().sum())\ndata = data.dropna()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:40.105843Z","iopub.execute_input":"2025-10-28T09:10:40.106182Z","iopub.status.idle":"2025-10-28T09:10:40.147950Z","shell.execute_reply.started":"2025-10-28T09:10:40.106150Z","shell.execute_reply":"2025-10-28T09:10:40.146685Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:40.149028Z","iopub.execute_input":"2025-10-28T09:10:40.149824Z","iopub.status.idle":"2025-10-28T09:10:40.156499Z","shell.execute_reply.started":"2025-10-28T09:10:40.149792Z","shell.execute_reply":"2025-10-28T09:10:40.155404Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Dropping unneccessary values\ndata = data.drop(['obj_ID','alpha','delta','run_ID','rerun_ID','cam_col','field_ID', 'spec_obj_ID', 'fiber_ID'], axis = 1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:40.160724Z","iopub.execute_input":"2025-10-28T09:10:40.161160Z","iopub.status.idle":"2025-10-28T09:10:40.182549Z","shell.execute_reply.started":"2025-10-28T09:10:40.161117Z","shell.execute_reply":"2025-10-28T09:10:40.181045Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Balancing Imbalanced Data\n# Downsampling\nfrom sklearn.utils import resample\n\nprint(\"Data values before balancing:\")\nprint(data[\"class\"].value_counts())\n\ngalaxies_instances = data[data[\"class\"] == \"GALAXY\"]\nstars_instances  = data[data[\"class\"] == \"STAR\"]\n\n# Insert majority class as downsample subject and second biggest class as sample size\ndownsample_instance = resample(galaxies_instances, replace = True, n_samples = len(stars_instances),\n                            random_state = 42)\n\n# Check downsampled shape\nprint(f\"\\nShape of downsample: {downsample_instance.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:40.184022Z","iopub.execute_input":"2025-10-28T09:10:40.184391Z","iopub.status.idle":"2025-10-28T09:10:40.240687Z","shell.execute_reply.started":"2025-10-28T09:10:40.184361Z","shell.execute_reply":"2025-10-28T09:10:40.239576Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Upsampling\n# Insert minority class as upsample subject and downsampled dataset for reference\nqso_instances = data[data[\"class\"] == \"QSO\"]\nupsample_instance = resample(qso_instances, replace = True, n_samples = len(downsample_instance),\n                            random_state = 42)\n\n# Check upsampled shape\nprint(f\"Shape of upsampled: {upsample_instance.shape}\\n\")\n\n# Downsized and Upsized Dataset\ndata_resampled = pd.concat([downsample_instance, stars_instances, upsample_instance])\nprint(\"Data values after balancing:\")\nprint(data_resampled[\"class\"].value_counts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:40.241851Z","iopub.execute_input":"2025-10-28T09:10:40.242661Z","iopub.status.idle":"2025-10-28T09:10:40.276966Z","shell.execute_reply.started":"2025-10-28T09:10:40.242629Z","shell.execute_reply":"2025-10-28T09:10:40.275804Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Encoding values for each classes\nencoder = LabelEncoder()\nprint(data_resampled[\"class\"].value_counts())\n\n# Dataframes are not reshape-able\n# Obtain values from dataframe to make it a 1D array\nclass_values = data_resampled[\"class\"].values\n\n# Label Encoder only uses 1D arrays\nclass_values = encoder.fit_transform(class_values)\nprint(\"\\n========\")\nprint(f\"\\nKEYS: \\nGalaxy = 0 \\nStar = 1 \\nQSO = 2\")\n\n# print(class_values)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:40.278100Z","iopub.execute_input":"2025-10-28T09:10:40.278426Z","iopub.status.idle":"2025-10-28T09:10:40.311981Z","shell.execute_reply.started":"2025-10-28T09:10:40.278396Z","shell.execute_reply":"2025-10-28T09:10:40.310719Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Model Implementation**","metadata":{}},{"cell_type":"code","source":"X = data_resampled.drop(['class'], axis = 1) # Features\nY = class_values                             # Outcome","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:40.313286Z","iopub.execute_input":"2025-10-28T09:10:40.313632Z","iopub.status.idle":"2025-10-28T09:10:40.329896Z","shell.execute_reply.started":"2025-10-28T09:10:40.313601Z","shell.execute_reply":"2025-10-28T09:10:40.328834Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Split data \nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size = 0.8, random_state = 42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:40.331040Z","iopub.execute_input":"2025-10-28T09:10:40.331430Z","iopub.status.idle":"2025-10-28T09:10:40.369620Z","shell.execute_reply.started":"2025-10-28T09:10:40.331402Z","shell.execute_reply":"2025-10-28T09:10:40.368036Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Logistic Regression Classification\nlog_model = LogisticRegression()\nlog_model.fit(X_train, Y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:40.370873Z","iopub.execute_input":"2025-10-28T09:10:40.371315Z","iopub.status.idle":"2025-10-28T09:10:41.528776Z","shell.execute_reply.started":"2025-10-28T09:10:40.371284Z","shell.execute_reply":"2025-10-28T09:10:41.528034Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Decision Tree Classification\ndtr_model = DecisionTreeClassifier()\ndtr_model.fit(X_train, Y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:41.529474Z","iopub.execute_input":"2025-10-28T09:10:41.529726Z","iopub.status.idle":"2025-10-28T09:10:42.327075Z","shell.execute_reply.started":"2025-10-28T09:10:41.529703Z","shell.execute_reply":"2025-10-28T09:10:42.325849Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Random Forest Classification\nrf_model = RandomForestClassifier(n_estimators=10)\nrf_model.fit(X_train, Y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:42.328353Z","iopub.execute_input":"2025-10-28T09:10:42.328661Z","iopub.status.idle":"2025-10-28T09:10:43.891739Z","shell.execute_reply.started":"2025-10-28T09:10:42.328619Z","shell.execute_reply":"2025-10-28T09:10:43.890745Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# SVM Classification\nfrom sklearn.svm import SVC\n\nsvm_model = SVC(kernel='rbf', C=1.0)\nsvm_model.fit(X_train, Y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:10:43.892672Z","iopub.execute_input":"2025-10-28T09:10:43.893083Z","iopub.status.idle":"2025-10-28T09:14:10.782079Z","shell.execute_reply.started":"2025-10-28T09:10:43.892978Z","shell.execute_reply":"2025-10-28T09:14:10.781039Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# k-NN Classification\nknn_model = KNeighborsRegressor(n_neighbors=5)\nknn_model.fit(X_train, Y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:10.783162Z","iopub.execute_input":"2025-10-28T09:14:10.783445Z","iopub.status.idle":"2025-10-28T09:14:10.901685Z","shell.execute_reply.started":"2025-10-28T09:14:10.783422Z","shell.execute_reply":"2025-10-28T09:14:10.899915Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Model Predictions and Metrics**\nPredictions of models alongside their metrics, some have been cut out due to traceback errors.\n- Logistic Regression\n- Decision Tree \n- Support Vector Machine\n- Random Forest Classification\n- K-NN Classification","metadata":{}},{"cell_type":"code","source":"predictions = log_model.predict(X_test)\nY_scores = log_model.predict_proba(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:10.902484Z","iopub.execute_input":"2025-10-28T09:14:10.902755Z","iopub.status.idle":"2025-10-28T09:14:10.934054Z","shell.execute_reply.started":"2025-10-28T09:14:10.902733Z","shell.execute_reply":"2025-10-28T09:14:10.932902Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Evaluation metrics\nprint(\"\\nLogistic Regression Metrics\")\nprint(\"===========================\")\ncm = pd.DataFrame(confusion_matrix(Y_test, predictions)) \nprecision_scores = precision_score(Y_test, predictions, average=None)\nrecall_score = recall_score(Y_test, predictions, average=None)\nauc = roc_auc_score(Y_test, Y_scores, multi_class='ovr')\nf1_score = f1_score(Y_test, predictions, average='weighted')\n\nprint(f\"Accuracy score: {((accuracy_score(Y_test, predictions))*100):.2f}%\")\nprint(f\"\\nPrecision scores: \\n Galaxy = {(precision_scores[0]*100):.2f}% \\n Star = {(precision_scores[1]*100):.2f}% \\n QSO = {(precision_scores[2]*100):.2f}%\")\nprint(f\"\\nRecall scores: \\n Galaxy = {(recall_score[0]*100):.2f}% \\n Star = {(recall_score[1])*100:.2f}% \\n QSO = {(recall_score[2])*100:.2f}%\")\nprint(f\"\\nAvg AUC score: {(auc*100):.2f}%\")\nprint(f\"\\nF1 score: {(f1_score*100):.2f}%\")\nprint(f\"\\nConfusion Matrix:\\n{cm}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:10.935320Z","iopub.execute_input":"2025-10-28T09:14:10.935723Z","iopub.status.idle":"2025-10-28T09:14:10.998108Z","shell.execute_reply.started":"2025-10-28T09:14:10.935698Z","shell.execute_reply":"2025-10-28T09:14:10.997051Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dtr_predictions = dtr_model.predict(X_test)\ndtr_Y_scores = dtr_model.predict_proba(X_test)\n\nprint(\"\\nDecision Tree Metrics\")\nprint(\"===========================\")\ndtr_cm = pd.DataFrame(confusion_matrix(Y_test, dtr_predictions)) \ndtr_precision_scores = precision_score(Y_test, dtr_predictions, average = None)\ndtr_auc = roc_auc_score(Y_test, dtr_Y_scores, multi_class = 'ovr')\n\n# dtr_f1_score = f1_score(Y_test, dtr_predictions)\nprint(f\"Accuracy score: {((accuracy_score(Y_test, dtr_predictions))*100):.2f}%\")\nprint(f\"\\nPrecision scores: \\n Galaxy = {(dtr_precision_scores[0]*100):.2f}% \\n Star = {(dtr_precision_scores[1]*100):.2f}% \\n QSO = {(dtr_precision_scores[2]*100):.2f}%\")\n# print(f\"\\nRecall scores: {(dtr_recall_score)}\")\nprint(f\"\\nAvg AUC score: {(dtr_auc*100):.2f}%\")\n# print(f\"\\nF1 score: {(dtr_f1_score*100):.2f}%\")\nprint(f\"\\nConfusion Matrix:\\n{dtr_cm}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:10.998974Z","iopub.execute_input":"2025-10-28T09:14:10.999314Z","iopub.status.idle":"2025-10-28T09:14:11.042291Z","shell.execute_reply.started":"2025-10-28T09:14:10.999291Z","shell.execute_reply":"2025-10-28T09:14:11.040886Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"svm_predictions = svm_model.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:11.043349Z","iopub.execute_input":"2025-10-28T09:14:11.043715Z","iopub.status.idle":"2025-10-28T09:14:45.740750Z","shell.execute_reply.started":"2025-10-28T09:14:11.043690Z","shell.execute_reply":"2025-10-28T09:14:45.739445Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"\\nSupport Vector Machine Metrics\")\nprint(\"===========================\")\nsvm_cm = pd.DataFrame(confusion_matrix(Y_test, svm_predictions)) \nsvm_precision_scores = precision_score(Y_test, svm_predictions, average='macro')\n\nprint(f\"Accuracy score: {((accuracy_score(Y_test, svm_predictions))*100):.2f}%\")\nprint(f\"\\nPrecision scores: {(svm_precision_scores*100):.2f}%\")\nprint(f\"\\nConfusion Matrix:\\n{svm_cm}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:45.741864Z","iopub.execute_input":"2025-10-28T09:14:45.742155Z","iopub.status.idle":"2025-10-28T09:14:45.763898Z","shell.execute_reply.started":"2025-10-28T09:14:45.742134Z","shell.execute_reply":"2025-10-28T09:14:45.762417Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rf_predictions = rf_model.predict(X_test)\nrf_Y_scores = rf_model.predict_proba(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:45.765267Z","iopub.execute_input":"2025-10-28T09:14:45.765624Z","iopub.status.idle":"2025-10-28T09:14:45.835786Z","shell.execute_reply.started":"2025-10-28T09:14:45.765596Z","shell.execute_reply":"2025-10-28T09:14:45.834335Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"\\nRandom Forest Metrics\")\nprint(\"===========================\")\nrf_cm = pd.DataFrame(confusion_matrix(Y_test, rf_predictions)) \nrf_precision_scores = precision_score(Y_test, rf_predictions, average='macro')\nrf_auc = roc_auc_score(Y_test, rf_Y_scores, multi_class='ovr')\n\nprint(f\"Accuracy score: {((accuracy_score(Y_test, rf_predictions))*100):.2f}%\")\nprint(f\"\\nPrecision scores: {(rf_precision_scores*100):.2f}%\")\nprint(f\"\\nAvg AUC score: {(rf_auc*100):.2f}%\")\nprint(f\"\\nConfusion Matrix:\\n{rf_cm}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:45.836794Z","iopub.execute_input":"2025-10-28T09:14:45.837148Z","iopub.status.idle":"2025-10-28T09:14:45.870979Z","shell.execute_reply.started":"2025-10-28T09:14:45.837124Z","shell.execute_reply":"2025-10-28T09:14:45.869864Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"knn_predictions = knn_model.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:45.876515Z","iopub.execute_input":"2025-10-28T09:14:45.876844Z","iopub.status.idle":"2025-10-28T09:14:46.076876Z","shell.execute_reply.started":"2025-10-28T09:14:45.876817Z","shell.execute_reply":"2025-10-28T09:14:46.075826Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"\\nK-NN Metrics\")\nprint(\"===========================\")\nknn_predictions_discreet = np.round(knn_predictions).astype(int)\nknn_cm = pd.DataFrame(confusion_matrix(Y_test, knn_predictions_discreet)) \n\nknn_precision_scores = precision_score(Y_test, knn_predictions_discreet, average='macro')\nprint(f\"Accuracy score: {((accuracy_score(Y_test, knn_predictions_discreet))*100):.2f}%\")\nprint(f\"\\nPrecision scores: {(knn_precision_scores*100):.2f}%\")\nprint(f\"\\nConfusion Matrix:\\n{knn_cm}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:46.078298Z","iopub.execute_input":"2025-10-28T09:14:46.078648Z","iopub.status.idle":"2025-10-28T09:14:46.099233Z","shell.execute_reply.started":"2025-10-28T09:14:46.078618Z","shell.execute_reply":"2025-10-28T09:14:46.097887Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Visualisations**\nVarious visualisations ranging from general dataset visualisations to thorough comparisons of 'true' Y_test variables and predictions of the five classification/estimator systems. \n- Histograms\n- Bars\n- Pie\n- Confusion Matrix\n- Multiclass ROC curve\n- Precision Recall curve","metadata":{}},{"cell_type":"code","source":"data.hist(figsize = (16,16));\nplt.title(\"Various Graphs for Features\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:46.100163Z","iopub.execute_input":"2025-10-28T09:14:46.100516Z","iopub.status.idle":"2025-10-28T09:14:48.041321Z","shell.execute_reply.started":"2025-10-28T09:14:46.100493Z","shell.execute_reply":"2025-10-28T09:14:48.040081Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"###  **Classes (Y Variables)**","metadata":{}},{"cell_type":"code","source":"data[\"class\"].value_counts().plot(kind = 'bar', color = [\"#D6D84F\", \"#B9E28C\", \"#9EADC8\"])\nplt.title(\"Types of Astral Bodies\", fontsize = 16)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:48.042516Z","iopub.execute_input":"2025-10-28T09:14:48.042806Z","iopub.status.idle":"2025-10-28T09:14:48.254796Z","shell.execute_reply.started":"2025-10-28T09:14:48.042776Z","shell.execute_reply":"2025-10-28T09:14:48.253654Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data[\"class\"].value_counts().plot(kind = 'pie', autopct = \"%.1f\", colors = [\"#D6D84F\", \"#B9E28C\", \"#9EADC8\"])\nplt.title(\"Types of Astral Bodies\", fontsize = 16)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:48.255914Z","iopub.execute_input":"2025-10-28T09:14:48.256271Z","iopub.status.idle":"2025-10-28T09:14:48.399175Z","shell.execute_reply.started":"2025-10-28T09:14:48.256242Z","shell.execute_reply":"2025-10-28T09:14:48.398104Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data_resampled.groupby(\"class\").size().plot(kind='pie', y = \"class\", label = \"count\",\n                                       autopct='%.1f', colors = [\"#D6D84F\", \"#B9E28C\", \"#9EADC8\"])\nplt.title(\"Classes After Balancing\", fontsize = 16)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:48.400657Z","iopub.execute_input":"2025-10-28T09:14:48.401105Z","iopub.status.idle":"2025-10-28T09:14:48.518918Z","shell.execute_reply.started":"2025-10-28T09:14:48.401072Z","shell.execute_reply":"2025-10-28T09:14:48.517941Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"###  **Confusion Matrix**","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import ConfusionMatrixDisplay\n\n# Function for defining Confusion Matrix graph to reuse again!\ndef plot_confusion_matrix(Y_test, predictions, cmap, modelname):\n    \n    cm = confusion_matrix(Y_test, predictions)\n    sns.heatmap(cm, annot = True, cmap = cmap, fmt = 'd')\n    plt.xlabel('Predicted Labels')\n    plt.ylabel('True Labels')\n    plt.title(f'{modelname} Confusion Matrix')\n    plt.show()\n    \nplot_confusion_matrix(Y_test, predictions, \"Blues\", \"Linear Regression\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:48.519810Z","iopub.execute_input":"2025-10-28T09:14:48.520099Z","iopub.status.idle":"2025-10-28T09:14:48.749114Z","shell.execute_reply.started":"2025-10-28T09:14:48.520072Z","shell.execute_reply":"2025-10-28T09:14:48.748079Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_confusion_matrix(Y_test, dtr_predictions, \"Spectral\", \"Decision Tree\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:48.750190Z","iopub.execute_input":"2025-10-28T09:14:48.750739Z","iopub.status.idle":"2025-10-28T09:14:49.098105Z","shell.execute_reply.started":"2025-10-28T09:14:48.750709Z","shell.execute_reply":"2025-10-28T09:14:49.096981Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_confusion_matrix(Y_test, rf_predictions, \"YlGnBu\", \"Random Forest\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:49.099539Z","iopub.execute_input":"2025-10-28T09:14:49.100424Z","iopub.status.idle":"2025-10-28T09:14:49.329568Z","shell.execute_reply.started":"2025-10-28T09:14:49.100390Z","shell.execute_reply":"2025-10-28T09:14:49.328305Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_confusion_matrix(Y_test, svm_predictions, \"summer\", \"Support Vector Machine\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:49.330879Z","iopub.execute_input":"2025-10-28T09:14:49.331229Z","iopub.status.idle":"2025-10-28T09:14:49.556380Z","shell.execute_reply.started":"2025-10-28T09:14:49.331205Z","shell.execute_reply":"2025-10-28T09:14:49.555294Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"###  **Multiclass ROC AUC**","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import roc_curve\nfrom sklearn.preprocessing import LabelBinarizer, label_binarize\nfrom sklearn.model_selection import learning_curve, StratifiedKFold, validation_curve\nfrom itertools import cycle","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:49.557631Z","iopub.execute_input":"2025-10-28T09:14:49.557984Z","iopub.status.idle":"2025-10-28T09:14:49.564172Z","shell.execute_reply.started":"2025-10-28T09:14:49.557955Z","shell.execute_reply":"2025-10-28T09:14:49.562748Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from yellowbrick.classifier import ROCAUC\nfrom yellowbrick.style import set_palette\n\nclasses = ['GALAXY','STAR','QSO']\n\n# Function for defining mutliclass ROC AUC graph\ndef plot_multiclass_roc(X_train, Y_train, X_test, Y_test, style, modeltype, names):\n    visualizer = ROCAUC(modeltype, classes=names)\n    \n    set_palette(style)\n    visualizer.fit(X_train, Y_train)        \n    visualizer.score(X_test, Y_test)       \n    visualizer.show()     \n    \nplot_multiclass_roc(X_train, Y_train, X_test, Y_test, \"muted\", log_model, classes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:49.565308Z","iopub.execute_input":"2025-10-28T09:14:49.565698Z","iopub.status.idle":"2025-10-28T09:14:50.285208Z","shell.execute_reply.started":"2025-10-28T09:14:49.565668Z","shell.execute_reply":"2025-10-28T09:14:50.283988Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_multiclass_roc(X_train, Y_train, X_test, Y_test, \"muted\", dtr_model, classes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:50.286183Z","iopub.execute_input":"2025-10-28T09:14:50.286699Z","iopub.status.idle":"2025-10-28T09:14:50.556725Z","shell.execute_reply.started":"2025-10-28T09:14:50.286668Z","shell.execute_reply":"2025-10-28T09:14:50.555840Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_multiclass_roc(X_train, Y_train, X_test, Y_test, \"muted\", rf_model, classes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:50.557853Z","iopub.execute_input":"2025-10-28T09:14:50.558226Z","iopub.status.idle":"2025-10-28T09:14:50.883647Z","shell.execute_reply.started":"2025-10-28T09:14:50.558194Z","shell.execute_reply":"2025-10-28T09:14:50.882322Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_multiclass_roc(X_train, Y_train, X_test, Y_test, \"muted\", svm_model, classes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:14:50.884922Z","iopub.execute_input":"2025-10-28T09:14:50.885312Z","iopub.status.idle":"2025-10-28T09:16:01.326076Z","shell.execute_reply.started":"2025-10-28T09:14:50.885283Z","shell.execute_reply":"2025-10-28T09:16:01.324893Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Error: \"This estimator is not a classifier; try a regression or clustering score visualizer instead!\" \n# KNN model does not have any graphs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:16:01.327225Z","iopub.execute_input":"2025-10-28T09:16:01.327517Z","iopub.status.idle":"2025-10-28T09:16:01.332340Z","shell.execute_reply.started":"2025-10-28T09:16:01.327492Z","shell.execute_reply":"2025-10-28T09:16:01.331129Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"###  **Precision Recalls**","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import precision_recall_curve, average_precision_score\n\ndef plot_multiclass_precisionrecallcurve(X_test,Y_test,num_classes, model, model_name):\n\n    num_classes = num_classes\n    # Example Precision-Recall curve\n    y_score = model.predict_proba(X_test)  # or predict_proba()\n    y_bin = label_binarize(Y_test, classes=list(range(num_classes)))\n\n    precision = dict()\n    recall = dict()\n    average_precision = dict()\n    for i in range(num_classes):\n        precision[i], recall[i], _ = precision_recall_curve(y_bin[:, i], y_score[:, i])\n        average_precision[i] = average_precision_score(y_bin[:, i], y_score[:, i])\n\n    # Compute micro-average ROC curve and ROC area\n    precision[\"micro\"], recall[\"micro\"], _ = precision_recall_curve(y_bin.ravel(), y_score.ravel())\n\n    plt.figure(figsize=(8, 6))\n    plt.step(recall['micro'], precision['micro'], where='post', label='Micro-average Precision-Recall curve')\n    for i, color in zip(range(num_classes), cycle(['navy', 'turquoise', 'darkorange', 'cornflowerblue', 'teal'])):\n        plt.step(recall[i], precision[i], where='post', color=color, label=f'Class {i} (AP = {average_precision[i]:0.2f})')\n\n    plt.xlabel('Recall')\n    plt.ylabel('Precision')\n    plt.ylim([0.0, 1.05])\n    plt.xlim([0.0, 1.0])\n    plt.title(f\"Precision-Recall curve - Multiclass {model_name}\")\n    plt.legend(loc=\"best\")\n    plt.show()\n\nplot_multiclass_precisionrecallcurve(X_test,Y_test,3,log_model,\"Linear Regression\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:16:01.333746Z","iopub.execute_input":"2025-10-28T09:16:01.334098Z","iopub.status.idle":"2025-10-28T09:16:01.739880Z","shell.execute_reply.started":"2025-10-28T09:16:01.334076Z","shell.execute_reply":"2025-10-28T09:16:01.738703Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_multiclass_precisionrecallcurve(X_test,Y_test,3,dtr_model,\"Decision Tree Classification\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:16:01.741045Z","iopub.execute_input":"2025-10-28T09:16:01.741391Z","iopub.status.idle":"2025-10-28T09:16:02.003035Z","shell.execute_reply.started":"2025-10-28T09:16:01.741364Z","shell.execute_reply":"2025-10-28T09:16:02.001954Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_multiclass_precisionrecallcurve(X_test,Y_test,3,dtr_model,\"Random Forest Classification\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:16:02.003989Z","iopub.execute_input":"2025-10-28T09:16:02.004368Z","iopub.status.idle":"2025-10-28T09:16:02.276324Z","shell.execute_reply.started":"2025-10-28T09:16:02.004341Z","shell.execute_reply":"2025-10-28T09:16:02.274916Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_multiclass_precisionrecallcurve(X_test,Y_test,3,dtr_model,\"Support Vector Machine Classification\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:16:02.277791Z","iopub.execute_input":"2025-10-28T09:16:02.278189Z","iopub.status.idle":"2025-10-28T09:16:02.542268Z","shell.execute_reply.started":"2025-10-28T09:16:02.278160Z","shell.execute_reply":"2025-10-28T09:16:02.540954Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## **Evaluations and Conclusion**","metadata":{}},{"cell_type":"code","source":"print(\"              Linear Regression Report\")\nprint(\"====================================================\")\nprint(f\"{classification_report(Y_test, predictions)}\")\nprint(\"         Decision Tree Classification Report\")\nprint(\"====================================================\")\nprint(f\"{classification_report(Y_test, dtr_predictions)}\")\nprint(\"          Support Vector Machine Report\")\nprint(\"====================================================\")\nprint(f\"{classification_report(Y_test, svm_predictions)}\")\nprint(\"         Random Forest Classification Report\")\nprint(\"====================================================\")\nprint(f\"{classification_report(Y_test, rf_predictions)}\")\nprint(\"              K-NN Classification Report\")\nprint(\"====================================================\")\nprint(f\"{classification_report(Y_test, knn_predictions_discreet)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T09:16:37.392129Z","iopub.execute_input":"2025-10-28T09:16:37.393510Z","iopub.status.idle":"2025-10-28T09:16:37.536701Z","shell.execute_reply.started":"2025-10-28T09:16:37.393466Z","shell.execute_reply":"2025-10-28T09:16:37.535739Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"###   **Demonstration of (Best Model's) Predictions for Interpretation**","metadata":{}},{"cell_type":"code","source":"from tabulate import tabulate\nimport math   \n\n# Create table to show results\nx_list, x2_list, x3_list, x4_list, x5_list, x6_list, x7_list, x8_list, y_list = [],[],[],[],[],[],[],[],[]\ntable_data = {}\n\nfor i in X_test.values[0:15]:\n    x_list.append(i[0])\n    x2_list.append(i[1])\n    x3_list.append(i[2])\n    x4_list.append(i[3])\n    x5_list.append(i[4])\n    x6_list.append(i[5])\n    x7_list.append(i[6])\n    x8_list.append(i[7])\n    \nfor i in dtr_predictions[0:15]:\n    y_list.append(i)\n\ntable_data.update({'X_Test': x_list, 'X2_Test': x2_list, 'X3_Test': x3_list, 'X4_Test': x4_list,\n'X5_Test': x5_list,'X6_Test': x6_list,'X7_Test': x7_list, 'X8_Test': x8_list,'Y_predict' : y_list})\n\nprint(\"                                       Decision Tree Predictions\")\nheaders = [\"Ultraviolet\", \"Green\", \"Red\", \"Infra\", \"Z\", \"Redshift\", \"Plate\", \"MJD\", \"Predictions\"]\ntable = tabulate(table_data, headers=headers, tablefmt=\"grid\", numalign=\"center\")\nprint(table)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-28T10:35:36.152416Z","iopub.execute_input":"2025-10-28T10:35:36.152768Z","iopub.status.idle":"2025-10-28T10:35:36.165770Z","shell.execute_reply.started":"2025-10-28T10:35:36.152737Z","shell.execute_reply":"2025-10-28T10:35:36.164900Z"},"jupyter":{"source_hidden":true,"outputs_hidden":true},"collapsed":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Dataset Description** The dataset's been taken from Kaggle, made by [fedesoriano](https://www.kaggle.com/datasets/fedesoriano/stellar-classification-dataset-sdss17). It focuses on identifying astral (star) bodies based on a series of recorded observations and proves useful for multiclass identification. There are 100,000 rows detailing the object identifier (object ID), alpha, delta, ultraviolet filter, green filter, near infrared filter, infrared filter, a run ID, rerun ID (processing method for image), camera column (scanline within the run ID), field ID, spectroscopic object IDs, class (which is our Y variables, aka our outcome values consisting of three types - GALAXY, STAR, QUASAR), redshift values, plate ID, Modified Julian Date (MJD) and fiber ID (pointed the light at focal plane for observation). \n\nIn summary, there are around *seventeen* unique float and integer type features and *three* string categorical classification types.\n\nfedesoriano. (January 2022). Stellar Classification Dataset - SDSS17. Retrieved [Date Retrieved] from https://www.kaggle.com/fedesoriano/stellar-classification-dataset-sdss17.\n\n**Preprocessing** In the preprocessing phase, the dataset is sought for null values and unneccessary columns specified in the .dropna() and .drop() functions respectively. Using the resample library (instead of the unusable SMOTE), methods such as 'upsampling' and 'downsampling' can be done by taking majority (classes with higher sample counts) and minority (classes with lower sample counts) as references to each other, then by resampling, allows the majority class to be cut down to align quantities with the minority. In this dataset's case, the 'GALAXY' class has the largest values, 'STAR' being the second and 'QSO' being the least. Its imperative to balance these in order to prevent bias from the classifier systems later on. I've balanced the three classes to meet the same shape of the 'STAR' class.\n\n**Limitations** However, considering that we're filling the gaps with copied data (for QSO/STAR upsampling) and cutting down the size of valuable data (for GALAXY/STAR downsampling), it's easy for the models to incur high bias and to lack enough information to make predictions more accurate. I've also opted for a simple label encoding rather than One-Hot or Ordinal, which are more optimal for multiclass datasets.\n\n**Model Implementation** During the model implementation, I've experimented with multiple classifiers other than Logistic Regression and an estimator class (K-NN). I've split the training and data by 80% and 20%, adding alongside a random state argument as to randomize the data and prevent model bias. According to various classifications, they require certain parameters to predict more efficiently.\n\n**Results** Judging from the classification reports, it appears that Decision Tree remains the highest scoring classification system in terms of precision with Random Forest reigning in second. The least accurate model was that of Support Vector with Logistic Regression being the second. It's also notable that the stellar class with the most accurate predictions is the 'QSO' (Quasar) class averaging a 77.2% precision score with 'GALAXY' at 76% and 'STAR' at 74.4%.\n\n**Interpretations** Certain classification systems work better with multiclass datasets as opposed to single class ones. There's a range of shapes shown through the Precision and ROC curves that suggest how well identification is addressed by each learning model. Sometimes the lines don't have a routine shape and curve wildly, showing variation whereas models like Decision Tree and Random Forest represent a bias, flocking to one corner in the graph. But of course, all this shows is that the more condensed these points are, the closer it is to certain points of accuracy. Here in this short sample of the (best model) Decision Tree's predictions, I investigate how the features affect the overall identification process. The most influential feature seems to be the 'Redshift' feature; For e.x, a pattern consists of stellar bodies having a redshift value between 1-2 being predicted as 'STAR' bodies, with 0.1-0.9 ranges identified as 'GALAXY' and 0.000+- ranges as 'QSO'.","metadata":{}}]}